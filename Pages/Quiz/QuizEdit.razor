@using shows_buzz_feed.Mappings.Quiz
@using shows_buzz_feed.Services
@inject QuizService service
@inject IToastService toastService

@if (quiz != null)
{
<div class="simple-form">
    <EditForm Model="@quiz" OnValidSubmit="@UpdateQuiz">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="times_completed">Times Completed</label>
            <InputNumber TValue="int" id="times_completed" min="0" class="form-control" @bind-Value="@quiz.TimesCompleted" />
        </div>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" required="required" class="form-control" @bind-Value="@quiz.Name" />
        </div>

        <div class="form-group">
            <button type="submit" value="Submit" class="btn btn-primary">Submit</button>
        </div>
    </EditForm>
    <button @onclick="BlazoredModal.CancelAsync" class="btn btn-secondary">Cancel</button>
</div> }
else
{
<div class="spinner-border text-primary" role="status">
    <span class="sr-only">Loading...</span>
</div>}

@code { [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter] public int quizId { get; set; }

    QuizViewModel quiz { get; set; }

    protected override async Task OnInitializedAsync()
    {
        quiz = await service.GetQuizAsync(quizId);
    }

    protected async Task UpdateQuiz()
    {
        UpdateQuizCommand update = new UpdateQuizCommand()
        {
            Id = quizId,
            Name = quiz.Name,
            DateCreated = quiz.DateCreated,
            TimesCompleted = quiz.TimesCompleted,
            UserId = quiz.UserId
        };

        var result = await service.UpdateQuizAsync(update);
        //if (result.IsSuccessStatusCode)
        //{
        //    toastService.ShowSuccess("Quiz has been updated successfully");
        //}
        //else
        //{
        //    toastService.ShowError("Quiz has not been updated");
        //}

        await BlazoredModal.CloseAsync(ModalResult.Ok<QuizViewModel>(quiz));
    } }