@page "/series"

@using shows_buzz_feed.Data
@using shows_buzz_feed.Services
@using shows_buzz_feed.Mappings.Series
@using Microsoft.JSInterop
@using Blazored.Modal.Services
@inject SeriesService seriesService
@inject IJSRuntime jsRuntime
@inject IModalService Modal
@using shows_buzz_feed.Pages

<h3>Series</h3>

<p>Here you can see all the films</p>

@if (series == null)
{
<p><em>Loading...</em></p> }
else
{
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Genre</th>
            @*<th>Edit</th>
            <th>Delete</th>*@
        </tr>
    </thead>
    <tbody>
        @foreach (var series in series.Series)
        {
<tr>
    <td>@series.Name</td>
    <td>@series.Genre</td>
    @*<td><button @onclick="@(() => ShowEditSeries(film.Id))" class="btn btn-warning">Edit</button></td>
        <td><button @onclick="@(() => Delete(film.Id))" class="btn btn-danger">Delete</button></td>*@
</tr>
}
        @*<tr><button @onclick="@(() => ShowCreateFilm())" class="btn btn-info">Create Film</button></tr>*@
    </tbody>
</table>}

@code { private SeriesListViewModel series;

            string _message;

            protected override async Task OnInitializedAsync()
            {
                series = await seriesService.GetSeriesAsync();
            }

            //protected async Task Delete(int id)
            //{
            //    bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete?");
            //    if (confirmed)
            //    {
            //        await seriesService.DeleteSeriesAsync(id);
            //        await Load();
            //        StateHasChanged();
            //    }
            //}

            //protected async void ShowCreateFilm()
            //{
            //    var options = new ModalOptions { DisableBackgroundCancel = true };
            //    var messageForm = Modal.Show<FilmCreate>("Create Film", options);
            //    var result = await messageForm.Result;

            //    if (!result.Cancelled)
            //    {
            //        _message = result.Data?.ToString() ?? string.Empty;
            //        await Load();
            //        StateHasChanged();
            //    }

            //}

            //protected async Task ShowEditFilm(int filmId)
            //{
            //    var options = new ModalOptions { DisableBackgroundCancel = true };
            //    var parameters = new ModalParameters();
            //    parameters.Add(nameof(FilmEdit.filmId), filmId);
            //    var messageForm = Modal.Show<FilmEdit>("Edit Film", parameters, options);
            //    var result = await messageForm.Result;

            //    if (!result.Cancelled)
            //    {
            //        _message = result.Data?.ToString() ?? string.Empty;
            //        await Load();
            //        StateHasChanged();
            //    }
            //}

            protected async Task Load()
            {
                series = await seriesService.GetSeriesAsync();
            } }
