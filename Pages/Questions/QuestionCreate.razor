@using shows_buzz_feed.Services
@using shows_buzz_feed.Mappings.Question
@using Microsoft.JSInterop
@using Blazored.Modal.Services
@inject QuestionService questionService
@inject IJSRuntime JsRuntime
@inject IToastService toastService
@inject IModalService Modal

<div style="border-radius: 5px;background-color: #f2f2f2;padding: 20px;">
    <EditForm Model="@questionModel" OnValidSubmit="@SubmitQuestion">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="question_no">Question Number</label>
            <InputNumber TValue="int" id="question_no" min="0" class="form-control" @bind-Value="@questionModel.Question_No" />
        </div>

        <div class="form-group">
            <label for="row_no">Row number</label>
            <InputNumber TValue="int" id="row_no" min="0" class="form-control" @bind-Value="@questionModel.Row_No" />
        </div>

        <div class="form-group">
            <label for="content">Content</label>
            <InputText id="content" required="required" class="form-control" @bind-Value="@questionModel.Content" />
        </div>

        @*<div class="form-group">
            <label for="releaseYear">Release Year</label>
            <InputNumber TValue="int" id="releaseYear" min="0" class="form-control" @bind-Value="@questionModel.ReleaseYear" />
        </div>

        <div class="form-group">
            <label for="releaseYear">Genre</label>
            <InputSelect @bind-Value="@questionModel.Genre">
                <option>Comedy</option>
                <option>Thriller</option>
                <option>Action</option>
                <option>Drama</option>
            </InputSelect>
        </div>*@
        <div class="form-group">
            <button type="submit" value="Submit" class="btn btn-primary">Submit</button>
        </div>
    </EditForm>
    <button @onclick="BlazoredModal.CancelAsync" class="btn btn-secondary">Cancel</button>
</div>

@code { [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    QuestionViewModel questionModel = new QuestionViewModel();

    void BackgroundCancelDisabled()
    {
        var options = new ModalOptions { DisableBackgroundCancel = true };
    }

    private async Task SubmitQuestion(EditContext question)
    {
        //if (questionModel.Genre == null)
        //{
        //    questionModel.Genre = "Comedy";
        //}
        CreateQuestionCommand create = new CreateQuestionCommand()
        {
            Question_No = questionModel.Question_No,
            Row_No = questionModel.Row_No,
            Content = questionModel.Content,
        };

        var result = await questionService.InsertQuestionAsync(create);

        //if (result > 0)
        //{
        //    toastService.ShowSuccess("Question has been added successfully");
        //    StateHasChanged();
        //}
        //else
        //{
        //    toastService.ShowError("Question has not been added");
        //}

        await BlazoredModal.CloseAsync(ModalResult.Ok<QuestionViewModel>(questionModel));
    } }
