@using shows_buzz_feed.Mappings.Question
@using shows_buzz_feed.Mappings.Quiz
@using shows_buzz_feed.Services
@inject QuestionService service
@inject QuizService QuizService
@inject IToastService toastService
@inject IJSRuntime jsRuntime

@if (question != null)
{
<div class="simple-form">
    <EditForm Model="@question" OnValidSubmit="@Update">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="question_No">Question Number</label>
            <InputNumber TValue="int" id="question_No" min="0" class="form-control" @bind-Value="@question.Question_No" />
        </div>

        <div class="form-group">
            <label for="row_No">Row Number</label>
            <InputNumber TValue="int" id="row_No" min="0" class="form-control" @bind-Value="@question.Row_No" />
        </div>

        <div class="form-group">
            <label for="content">Content</label>
            <InputText id="content" required="required" class="form-control" @bind-Value="@question.Content" />
        </div>

        <div class="form-group">
            <label for="quiz">Quiz</label>
            @if (quizes == null)
            {
<p><em>Loading...</em></p> }
else
{

<InputSelect @bind-Value="@question.QuizId">
    <option value="--">--</option>
    @foreach (var quiz in quizes.Quizes)
            {
<option value=@quiz.Id>@quiz.Name</option> @*<option>@quiz.Id</option>*@}
</InputSelect>}
        </div>

        <div class="form-group">
            <button type="submit" value="Submit" class="btn btn-primary">Submit</button>
        </div>
    </EditForm>
    <button @onclick="BlazoredModal.CancelAsync" class="btn btn-secondary">Cancel</button>
</div> }
else
{
<div class="spinner-border text-primary" role="status">
    <span class="sr-only">Loading...</span>
</div>}

@code { [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter] public int questionId { get; set; }

    QuestionViewModel question { get; set; }
    private QuizListViewModel quizes;

    protected override async Task OnInitializedAsync()
    {
        quizes = await QuizService.GetQuizesAsync();
        question = await service.GetQuestionAsync(questionId);
    }

    protected async Task Update()
    {
        if (question.QuizId == "--")
        {
            await jsRuntime.InvokeAsync<bool>("confirm", "No quiz selected");
            return;
        }
        UpdateQuestionCommand update = new UpdateQuestionCommand()
        {
            Id = questionId,
            Content = question.Content,
            Question_No = question.Question_No,
            Row_No = question.Row_No,
            QuizId = int.Parse(question.QuizId),
        };

        var result = await service.UpdateQuestionAsync(update);
        //if (result.IsSuccessStatusCode)
        //{
        //    toastService.ShowSuccess("Question has been updated successfully");
        //}
        //else
        //{
        //    toastService.ShowError("Question has not been updated");
        //}

        await BlazoredModal.CloseAsync(ModalResult.Ok<QuestionViewModel>(question));
    } }