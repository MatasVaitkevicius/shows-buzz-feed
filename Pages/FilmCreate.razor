@using shows_buzz_feed.Services
@using shows_buzz_feed.Mappings.Film
@using Microsoft.JSInterop
@using Blazored.Modal.Services
@inject FilmService filmService
@inject IJSRuntime JsRuntime
@inject IToastService toastService
@inject IModalService Modal

<div style="border-radius: 5px;background-color: #f2f2f2;padding: 20px;">
    <EditForm Model="@filmModel" OnValidSubmit="@SubmitFilm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="budget">Budget $</label>
            <InputNumber TValue="double" id="budget" min="0" class="form-control" @bind-Value="@filmModel.Budget" />
        </div>

        <div class="form-group">
            <label for="length">Length, minutes</label>
            <InputNumber TValue="double" id="length" min="0" class="form-control" @bind-Value="@filmModel.Length" />
        </div>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" required="required" class="form-control" @bind-Value="@filmModel.Name" />
        </div>

        <div class="form-group">
            <label for="releaseYear">Release Year</label>
            <InputNumber TValue="int" id="releaseYear" min="0" class="form-control" @bind-Value="@filmModel.ReleaseYear" />
        </div>

        <div class="form-group">
            <label for="releaseYear">Genre</label>
            <InputSelect @bind-Value="@filmModel.Genre">
                <option>Comedy</option>
                <option>Thriller</option>
                <option>Action</option>
                <option>Drama</option>
            </InputSelect>
        </div>
        <div class="form-group">
            <button type="submit" value="Submit" class="btn btn-primary">Submit</button>
        </div>
    </EditForm>
        <button @onclick="BlazoredModal.CancelAsync" class="btn btn-secondary">Cancel</button>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    FilmViewModel filmModel = new FilmViewModel();

    void BackgroundCancelDisabled()
    {
        var options = new ModalOptions { DisableBackgroundCancel = true };
    }

    private async Task SubmitFilm(EditContext film)
    {
        if (filmModel.Genre == null) {
            filmModel.Genre = "Comedy";
        }
        CreateFilmCommand create = new CreateFilmCommand()
        {
            Length = filmModel.Length,
            Budget = filmModel.Budget,
            ReleaseYear = filmModel.ReleaseYear,
            Name = filmModel.Name,
            Genre = filmModel.Genre,
        };

        var result = await filmService.InsertFilmAsync(create);

        //if (result > 0)
        //{
        //    toastService.ShowSuccess("Film has been added successfully");
        //    StateHasChanged();
        //}
        //else
        //{
        //    toastService.ShowError("Film has not been added");
        //}

        await BlazoredModal.CloseAsync(ModalResult.Ok<FilmViewModel>(filmModel));
    }
}
