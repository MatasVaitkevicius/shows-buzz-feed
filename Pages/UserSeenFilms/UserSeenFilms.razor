@page "/UserSeenFilms"

@using shows_buzz_feed.Data
@using shows_buzz_feed.Services
@using shows_buzz_feed.Mappings.UserSeenFilm
@using shows_buzz_feed.Mappings.Rating
@using Microsoft.JSInterop
@using Blazored.Modal.Services
@using shows_buzz_feed.Helpers
@inject UserSeenFilmService userSeenFilmService
@inject RatingService ratingService
@inject IJSRuntime jsRuntime
@inject IModalService Modal
@using shows_buzz_feed.Pages.Ratings


<h3>User Seen Films</h3>

<p>Here you can see all the User Seen Films</p>

@if (userSeenFilms == null)
{
<p><em>Loading...</em></p> }
else
{
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>FilmId</th>
            <th>Film Name</th>
            <th>UserId</th>
            <th>User Name</th>
            <th>CreatedAt</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var userSeenFilm in userSeenFilms.UserSeenFilms)
        {
<tr>
    <td>@userSeenFilm.Id</td>
    <td>@userSeenFilm.FilmId</td>
    <td>@userSeenFilm.FilmName</td>
    <td>@userSeenFilm.UserId</td>
    <td>@userSeenFilm.UserName</td>
    <td>@userSeenFilm.CreatedAt</td>
    @if (!ratings.Ratings.Any(e => e.UserSeenFilmId == userSeenFilm.Id && e.UserId == UserHelper.UserId))
    {
<td><button @onclick="@(() => ShowRatingCreate(userSeenFilm.Id))" class="btn btn-warning">Rate Movie</button></td>
}

    <td><button @onclick="@(() => Delete(userSeenFilm.Id))" class="btn btn-danger">Delete</button></td>
</tr>
}
        @*<tr><button @onclick="@(() => ShowCreateFilm())" class="btn btn-info">Create Film</button></tr>*@
    </tbody>
</table>}

@code { private UserSeenFilmListViewModel userSeenFilms;
    private RatingListViewModel ratings;
    string _message;

    protected override async Task OnInitializedAsync()
    {
        userSeenFilms = await userSeenFilmService.GetUserSeenFilmsAsync(UserHelper.UserId);
        ratings = await ratingService.GetAllRatingsAsync(UserHelper.UserId);
    }


    protected async Task ShowRatingCreate(int userSeenFilmId)
    {
        var options = new ModalOptions { DisableBackgroundCancel = true };

        var parameters = new ModalParameters();
        parameters.Add(nameof(RatingCreate.userSeenFilmId), userSeenFilmId);

        var messageForm = Modal.Show<RatingCreate>("Rate Movie", parameters, options);
        var result = await messageForm.Result;
        await Load();
        StateHasChanged();
    }

    protected async Task Delete(int id)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete?");
        if (confirmed)
        {
            await userSeenFilmService.DeleteUserSeenFilm(id);
            await Load();
            StateHasChanged();
        }
    }

    protected async Task Load()
    {
        userSeenFilms = await userSeenFilmService.GetUserSeenFilmsAsync(UserHelper.UserId);
        ratings = await ratingService.GetAllRatingsAsync(UserHelper.UserId);
    } }